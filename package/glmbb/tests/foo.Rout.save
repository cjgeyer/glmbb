
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  library(glmbb)
>  data(crabs)
> 
>  gout <- glm(satell ~ color * spine * width * weight, family = poisson,
+      data = crabs)
>  sum(! is.na(gout$coefficients))
[1] 36
>  gout <- glm(satell ~ 1, family = poisson, data = crabs)
>  sum(! is.na(gout$coefficients))
[1] 1
> 
>  gout <- glmbb(satell ~ color * spine * width * weight, data = crabs)
Warning messages:
1: glm.fit: fitted rates numerically 0 occurred 
2: glm.fit: fitted rates numerically 0 occurred 
3: glm.fit: fitted rates numerically 0 occurred 
4: glm.fit: fitted rates numerically 0 occurred 
5: glm.fit: fitted rates numerically 0 occurred 
> 
>  fits <- ls(envir = gout$envir, pattern = "^sha1")
>  length(fits)
[1] 101
>  criteria <- Map(function(x) get(x, envir = gout$envir)$criterion, fits)
>  formulae <- Map(function(x) get(x, envir = gout$envir)$formula, fits)
>  names(criteria) <- NULL
>  names(formulae) <- NULL
>  criteria <- unlist(criteria)
>  formulae <- lapply(formulae, tidy.formula.hierarchical)
>  formulae <- sapply(formulae, deparse, width.cutoff = 500)
>  fred <- data.frame(criteria, formulae)
>  fred <- fred[order(criteria), ]
>  opt <- options(width = 132)
>  print(fred[1:20, ], right = FALSE)
    criteria formulae                                                                                                 
81  894.3717 satell ~ color * spine * width + spine * width * weight                                                  
32  895.5158 satell ~ color * spine * width + color * width * weight + spine * width * weight                         
47  895.8019 satell ~ color * spine + color * width + width * weight                                                  
25  896.3546 satell ~ color * spine + spine * weight                                                                  
88  896.8069 satell ~ color * spine + color * width * weight                                                          
11  896.8724 satell ~ color * spine * width + color * spine * weight + color * width * weight                         
8   896.9920 satell ~ color * spine + width * weight                                                                  
92  897.0421 satell ~ color * spine + spine * width + width * weight                                                  
10  897.2368 satell ~ color * spine + spine * weight + width * weight                                                 
13  897.3034 satell ~ color * spine + color * width + spine * weight + width * weight                                 
85  897.4383 satell ~ width + color * spine + spine * weight                                                          
3   897.4502 satell ~ color * spine + color * width + spine * weight                                                  
63  897.7957 satell ~ color * spine + color * weight + width * weight                                                 
56  898.1885 satell ~ color * spine + spine * weight + color * width * weight                                         
50  898.4414 satell ~ color * spine + color * width + spine * width + width * weight                                  
15  898.6678 satell ~ weight + color * spine + spine * width                                                          
41  899.0153 satell ~ color * spine + color * weight + spine * weight                                                 
57  899.0550 satell ~ color * weight + color * spine * width + spine * width * weight                                 
95  899.3480 satell ~ color * spine * width + color * spine * weight + color * width * weight + spine * width * weight
100 899.6955 satell ~ width * weight + color * spine * width                                                          
>  options(opt)
> 
>  # check criteria
>  criteria.too <- Map(function(x) get(x, envir = gout$envir)$aic, fits)
>  names(criteria.too) <- NULL
>  criteria.too <- unlist(criteria.too)
>  identical(criteria, criteria.too)
[1] TRUE
> 
>  gout <- glmbb(satell ~ color * spine * width * weight,
+      family = poisson, data = crabs, criterion = "BIC", cutoff = 10)
Warning message:
glm.fit: fitted rates numerically 0 occurred 
> 
>  fits <- ls(envir = gout$envir, pattern = "^sha1")
>  length(fits)
[1] 135
>  criteria <- Map(function(x) get(x, envir = gout$envir)$criterion, fits)
>  formulae <- Map(function(x) get(x, envir = gout$envir)$formula, fits)
>  names(criteria) <- NULL
>  names(formulae) <- NULL
>  criteria <- unlist(criteria)
>  formulae <- lapply(formulae, tidy.formula.hierarchical)
>  formulae <- sapply(formulae, deparse, width.cutoff = 500)
>  fred <- data.frame(criteria, formulae)
>  fred <- fred[order(criteria), ]
>  print(fred[fred$criteria <= min(fred$criteria) + gout$cutoff, ], right = FALSE)
    criteria formulae                       
68  921.2009 satell ~ width * weight        
130 926.4707 satell ~ weight                
11  929.5306 satell ~ color + width * weight
128 930.0982 satell ~ spine + width * weight
84  930.6581 satell ~ width + weight        
> 
>  # check criteria
>  criteria.too <- Map(function(x) BIC(get(x, envir = gout$envir)), fits)
>  names(criteria.too) <- NULL
>  criteria.too <- unlist(criteria.too)
>  identical(criteria, criteria.too)
[1] TRUE
> 
>  # now AICc
> 
>  gout <- glmbb(satell ~ color * spine * width * weight,
+      family = poisson, data = crabs, criterion = "AICc", cutoff = 5)
Warning messages:
1: glm.fit: fitted rates numerically 0 occurred 
2: glm.fit: fitted rates numerically 0 occurred 
3: glm.fit: fitted rates numerically 0 occurred 
4: glm.fit: fitted rates numerically 0 occurred 
>  fits <- ls(envir = gout$envir, pattern = "^sha1")
>  criteria <- Map(function(x) get(x, envir = gout$envir)$criterion, fits)
>  criteria.too <- Map(function(x) get(x, envir = gout$envir)$aic, fits)
>  p.too <- Map(function(x)
+      sum(! is.na(get(x, envir = gout$envir)$coefficients)), fits)
>  n <- nrow(crabs)
>  criteria.too <- Map(function(x, p) x + 2 * p * (p + 1) / (n - p - 1),
+      criteria.too, p.too)
>  all.equal(criteria, criteria.too)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  2.282   0.018   2.352 
